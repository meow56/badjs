'use strict';

const l111l11l1l1ll111 = 775438872541617387238694n;
let l111l11l1l11ll11 = BigInt;
let l111l1l1l1111l1l = Map;
function l111l11lll1ll111(l11l1111l111l11l) {/*Hey everyone, welcome to my let's play of bad js. What is bad js, you might ask? You might already have an idea from the title screen, but let's start the game to really cement it.*/var l111l11l1l11l111 = l111l11l1l1ll111;var l11ll11l1l1ll111 = '';var l11ll11l1l11l111 = -1n;while(l111l11l1l11ll11(+true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true+ +true) ** ++l11ll11l1l11l111 <= l111l11l1l11l111);/*See what I mean? It's a total mess. And it'll only get worse from here. But I (and you, if you're reading this) signed up for this, so let's keep going.*/l11ll11l1l11l111--;/*You know, I think it's interesting how different UIs could change your experience with this game. I mean, the program I'm using to play this game (Sublime Text, if you're wondering) displays 0 with a line from bottom left to top right, which easily distinguishes it from O. That's why I used l and 1, since they're pretty similar in Sublime. But maybe in your program, l and 1 are different enough that you can distinguish them at a glance. That's also why I made the variable names to be so long.*/while(l11ll11l1l11l111 >= [] * []) {/*I really tried to pull out all the stops here. To get a high score, you really need to master this game. Knowing the ins and outs of the game mechanics means you can do some terrible things that no one realizes you can do. Which hopefully means that they'll be super confused! And the more confused they are, the harder it'll be for them to decode the code, right? Heh, decode the code. Funny.*/if(l111l11l1l11l111 / (l111l11l1l11ll11([[[[[[2n]]]]]] ** [[[[[[[4n]]]]]]]) ** l11ll11l1l11l111) <= [[[42, [39, 211, [[[], 2]]], [4, [76]]], [22, [[[7], [2]]], [58, []]]], [], 943 & 200, {l11l111l11l1l1ll: 8, l111l1l1l11l1ll1: [[5, 3], 9]}, new Map([[1, 2], [4, 0]]), , 4, `l11l111l1${l111l11l1l11l111}1ll1l1l1111`, (a) => a + 5].length) {l11ll11l1l1ll111 += l111l11l1l11l111 / (l111l11l1l11ll11([[[[[[2n]]]]]] ** [[[[[[[4n]]]]]]]/*You like these arrays? You're gonna see them again soon, don't you worry. I could've gone really ham and just added like a [[[[[[[[[[[[[[[bajillion]]]]]]]]]]]]]] of them, but I thought that would be kinda boring. Actually, I got a little lazy and just copy pasted them into the next line, so, you know. By the way, did you notice that those brackets around bajillion were mismatched? Go back and check!*/) ** l11ll11l1l11l111);} else {var l11l1l1l1lll1l11 = [l11ll11l1l1ll111, l111l11l1l11l111, l11ll11l1l11l111, l111l11l1l11ll11, l111l1l1l1111l1l, l11ll11l1l1lll11,, l1l111l1l11l1l1l, l11ll11l1l1ll11l, l111l11lll11l111, (![] + [])[+!+[]], ([][`entries`]()+``)[+!+[]+!+[]]/*Shout out to https://github.com/aemkei/jsfuck/blob/master/jsfuck.js for having this entry and the next one. I couldn't think of a way to encode these things, so I just used the ones at the site. And by the way, I am aware that I could use JSFuck to make this thing far worse, but that's really boring. Like Rivals of Aether Cosmic Ronald levels of boring.*/, ([][`flat`]+``)[+!+[]+!+[]+!+[]], ([![]] + [][[]])[[+!+[]]+[+!+[]+!+[]+!+[]]], ([![]] + [][[]])[[+!+[]]+[+!+[]+!+[]]], (![] + [])[+[]]];l11ll11l1l1ll111 += l11l1l1l1lll1l11[l111l11l1l11l111 / (l111l11l1l11ll11(+(l111l11l1l1ll111.toString(10)[8]) * +(l111l11l1l1ll111.toString(10)[8]) * +(l111l11l1l1ll111.toString(10)[3])) ** l11ll11l1l11l111)];}l111l11l1l11l111 -= l111l11l1l11l111 / (l111l11l1l11ll11(/*Oh, here it comes. The copy pasted arrays that I was talking about in the last comment. Like I said, these are exactly the same as the last ones. Or maybe I'm lying, and they're different? Only one way to find out, right?*/[[[[[[2n]]]]]] ** [[[[[[[4n]]]]]]]) ** l11ll11l1l11l111) * (l111l11l1l11ll11([,false, NaN == NaN,, 1, 8,, ,3,  ,-2,,,5, , -7  , ,  ,2,,,  7, -1,,].reduce((l11ll11lll11l111, l1lll11l1l11l111) => l11ll11lll11l111 + l1lll11l1l11l111)) ** l11ll11l1l11l111);/*Man, that array sure looked nice, didn't it? How many entries did that thing have anyways? I'm honestly not sure, I just kept adding commas and spaces until it looked sufficiently terrible.*/l11ll11l1l11l111 = l11ll11l1l11l111 - l111l11l1l11ll11(+true);}/*Hey, we're like halfway done! Maybe. How has this let's play been so far? Are you enjoying it? If so, then good! You still have another half of the let's play to lose your sanity. If not, then...I don't really know what to say. Oh, my speaking probably isn't helping, is it? Well, if you find me annoying to read/scroll through, feel free to delete all of my comments. They aren't going to have any helpful information anyways. You know, since that would be kinda antithetical to the whole premise of the game.*/var l1l111l1l11l1l1l = [];var l11ll11l1l11l111 = 0;var l111l11l1l11l111 = 0; /*Oh, I almost forgot to talk about our sponsor: Assault: Darkness Myths. Assault: Darkness Myths is an amazing MMOBAttleRoyalePG. In it, you fight bad guys. Doesn't that sound awesome? Its graphics are really retro, but not too retro. Like N64 levels. Despite this, its frame rate is lower than its player count, which perfectly compliments its...creative interpretation of the word gameplay. Finally, the music really evokes a lot of feelings in me; the ringing in my ears is almost enough to distract from the headache I got from trying to understand the story. So if you too want to play Assault: Darkness Myths, go to the link in the description and use code REALLYBAD to get -(-40)% off of your purchase. That's right, -(-40)% off! What a steal, for at least one party! And remember, using the code helps give me a forlorn wish to return to a simpler time, one where I haven't turned my passion project into a day job!*/var l11ll11l1l1ll11l = [/*...I've never actually played Assault: Darkness Myths, or any game that may or may not exist which happens to have a similar name. So you know, don't sue me or something, hypothetical creator of any game that I may be ribbing.*/];var l11ll11l1l1lll11 = new l111l1l1l1111l1l();  var l111l11lll11l111 = [];/*Anyways, look at all those variables! And man, a new... something. I wonder that could be. (I mean, it's not like there are many options, are there? Oops, maybe that's giving away too much info.) Anyways, the fun is just starting, so strap in.*/for(let l111ll1l1l1ll111 = 0; l111ll1l1l1ll111 < l11ll11l1l1ll111.length; l111ll1l1l1ll111++) {if(l11ll11l1l1ll111[l111ll1l1l1ll111] == +[] || l11ll11l1l1ll111[l111ll1l1l1ll111]/*I'm going to be honest, I'm kinda running out of things to talk about. I mean, I can't really say anything about the code itself. And there's only so much I can say about the development process before I just run out of things to say. Well, whatever. I bet you're not even reading this anyways, so it won't really matter.*/ == ([][`entries`]()+``)[+!+[]+!+[]]) {l111l11lll11l111.push(l111ll1l1l1ll111);} else if(l11ll11l1l1ll111[l111ll1l1l1ll111] ==/*Oh, I know. What do you think about these ==? If you're not used to JS, you may not know it, but == is really terrible. Those who are only familiar with C or other similar languages may wonder, isn't this just the standard equality operator? And the answer is: no. == is what is known as the abstract equality operator. What this means in practice is that it will try to convert two between types. So `0` == 0, for example. This can lead to a lot of terrible things if you're not careful...that's one of the reasons why JS also has ===, the strict equality operator. This doesn't convert between types, so `0` does not === 0. From what I've learned, you should be using === for everything. There's no real reason to be using == if you do things carefully, and if you really need to convert between types, you can just use any of the various functions to convert between types (eg parseInt) that JS already uses anyways for ==. And this has been your JS lesson for today.*/ parseInt(0.000000005, 10) || l11ll11l1l1ll111[l111ll1l1l1ll111] == ([][`flat`]+``)[+!+[]+!+[]+!+[]]) {var l1l1l1l111l1ll11 = l111l11lll11l111.pop();l11ll11l1l1lll11.set(l111ll1l1l1ll111, /*Did you think that it was boring that I just copy pasted from way up above? Don't worry, I've got a trick up my sleeve for next time. So be ready for it!*/l1l1l1l111l1ll11);l11ll11l1l1lll11.set(l1l1l1l111l1ll11, l111ll1l1l1ll111 + +!!l111ll1l1l1ll111/*Alright, here we go... I hope this is particularly funny to you. Or that you curse my name. Either would be acceptable.*/);}}while(l11ll11l1l11l111 < l11ll11l1l1ll111.length) {switch(l11ll11l1l1ll111[l11ll11l1l11l111++]) {case this.toString()[1786]:case this.toString()[3805]:l111l11l1l11l111++;break;case this.toString()[2011]:case this.toString()[1061]:l111l11l1l11l111--;break;case this.toString()[342]:case this.toString()[1845]:l11ll11l1l1ll11l[l111l11l1l11l111] = l11ll11l1l1ll11l[l111l11l1l11l111] ? l11ll11l1l1ll11l[l111l11l1l11l111] + 1 : 1;break;case this.toString()[3841]:case this.toString()[6516]:l11ll11l1l1ll11l[l111l11l1l11l111] = l11ll11l1l1ll11l[l111l11l1l11l111] ? l11ll11l1l1ll11l[l111l11l1l11l111] - 1 : -1;break;case this.toString()[5045]:case this.toString()[7767]:l1l111l1l11l1l1l.push(l11ll11l1l1ll11l[l111l11l1l11l111]);break;case this.toString()[1841]:case this.toString()[8679]:l11ll11l1l1ll11l[l111l11l1l11l111] = l11l1111l111l11l.shift();break;case this.toString()[4800]:case this.toString()[9729]:!l11ll11l1l1ll11l[l111l11l1l11l111] ? l11ll11l1l11l111 = l11ll11l1l1lll11.get(l11ll11l1l11l111 - 1) : undefined;break;case this.toString()[8780]:case this.toString()[64]:l11ll11l1l1ll11l[l111l11l1l11l111] ? l11ll11l1l11l111 = l11ll11l1l1lll11.get(l11ll11l1l11l111 - 1) : undefined;break;default:l11ll11l1l1ll11l[l111l11l1l11l111++] = l11ll11l1l11l111;break;}}return l1l111l1l11l1l1l;/*And you've reached the end of my let's play. Congratulations! Now, did you understand any of it...?*/}

window.onload = function() {
	let submitButton = document.getElementById("submit");
	submitButton.onclick = function() {
		let in1 = parseInt(document.getElementById("in1").value, 10);
		let in2 = parseInt(document.getElementById("in2").value, 10);
		let in3 = parseInt(document.getElementById("in3").value, 10);
		if(isNaN(in1) || isNaN(in2) || isNaN(in3)) return;
		if(in1 < 0 || in2 < 0 || in3 < 0) return;
		let result = l111l11lll1ll111.bind(l111l11lll1ll111)([in1, in2, in3]);
		document.getElementById("result").textContent = result;
	}
}